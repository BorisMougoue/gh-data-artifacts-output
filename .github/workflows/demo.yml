name: Deploy website
on:
  push:
    branches:
      - dependency
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: Cache dependencies  # step to cache the dependencies from the next steps
        uses: actions/cache@v4  # cache action
        with:
          path: ~/.npm # this is the path used by the npm tool to cache folder. path to the folder that should be cached
          key: deps-node-modules-${{ hashFiles('**/package-lock.json') }}
                # the hashFiles produices a unique value whenenver the path passed to it changes
                # this key will be use to retrieve the cache; we assign a dynamic name to the key
                 # incase the dependencies in the package-lock.json change, the key will change and the  cache will not be use anymore
                 # the dependencies will be install again if the key changes
      - name: Install dependencies
        run: npm ci
      - name: Lint code
        run: npm run lint
      - name: Test code
        run: npm run test
      
  # our goal is to ouput the name of the js file in the asset folder created by the upload artifact   
  build:
    needs: test
    runs-on: ubuntu-latest
    # we add the output section to get ouput of the build job
    outputs: # we can then define as many outputs as possible
      script-file: ${{steps.publish.outputs.script-file}}  #steps = standards steps context; publish = step id defined in the step; outputs=standard value; script-file= the output name define in the step
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: Cache dependencies  # step to cache the dependencies from the next steps
        uses: actions/cache@v4  # cache action
        with:
          path: ~/.npm # this is the path used by the npm tool to cache folder. path to the folder that should be cached
          key: deps-node-modules-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies
        run: npm ci
      - name: Build website
        run: npm run build
      - name: Publish JS filename
        # this command finds the js file in the assets folder and execute the echo command to get the file name
        #script-file= the name of your output. This should be the same name provided under the output section
        # $GITHUB_OUTPUT this is a standard variable and should be used for any output
        id: publish # this id field is necessary when using steps context
        run: find dist/assets/*.js -type f -execdir echo 'script-file={}' >> $GITHUB_OUTPUT ';' #script-file= the name of your output
      - name: Upload artifacts
        uses: actions/upload-artifact@v4 # this action upload the output of this job
        with:
          name: dist-files # name of the artifact to upload
          path: dist
         # path: |  # where to find the files that should be stored or what to upload
         #   dist
         #   package.json
     
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Get build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-files # name of the artifact we want to download. same name as in the build job
      - name: output content
        run: ls  # this will list the file downloaded in the dist-files folder
      - name: Output filename # we want to ouput the filename generated by the build job. we will use the needs context object
        run: echo "${{needs.build.outputs.script-file}}"
        #needs=context;build=the dependent job; outputs=standard value; script-file=the output name define in the build job
      - name: Deploy
        run: echo "Deploying..."